import deepmerge from 'deepmerge';
import { basename, extname } from 'path';
import { refLookup } from '../utils';
import { convertUtilsToImportList, getImportStatements } from './imports';
export const defaultOptions = {
    enabled: true,
    types: {
        enabled: true,
        itemsUseTuples: false,
        aliasExecuteMsg: false
    },
    client: {
        enabled: true,
        execExtendsQuery: true,
        noImplicitOverride: false,
        useDeclareKeyword: false,
    },
    recoil: {
        enabled: false
    },
    messageComposer: {
        enabled: false
    },
    messageBuilder: {
        enabled: false,
    },
    reactQuery: {
        enabled: false,
        optionalClient: false,
        version: 'v4',
        mutations: false,
        camelize: true,
        queryKeys: false
    },
    useContractsHook: {
        enabled: false
    }
};
export const getDefinitionSchema = (schemas) => {
    const aggregateSchema = {
        definitions: {
        //
        }
    };
    schemas.forEach(schema => {
        schema.definitions = schema.definitions || {};
        aggregateSchema.definitions = {
            ...aggregateSchema.definitions,
            ...schema.definitions
        };
    });
    return aggregateSchema;
};
export class BuilderContext {
    providers = {};
    addProviderInfo(contractName, type, classname, filename) {
        if (!this.providers[contractName]) {
            this.providers[contractName] = {};
        }
        this.providers[contractName][type] = {
            classname,
            filename,
            basename: basename(filename, extname(filename))
        };
    }
    getProviderInfos() {
        return this.providers;
    }
}
/**
 * context object for generating code.
 * only mergeDefaultOpt needs to implementing for combine options and default options.
 * @param TOpt option type
 */
export class RenderContextBase {
    builderContext;
    contract;
    utils = {};
    schema;
    options;
    constructor(contract, options, builderContext) {
        this.contract = contract;
        this.schema = getDefinitionSchema(contract.schemas);
        this.options = this.mergeDefaultOpt(options);
        this.builderContext = builderContext ?? new BuilderContext();
    }
    refLookup($ref) {
        return refLookup($ref, this.schema);
    }
    addUtil(util) {
        this.utils[util] = true;
    }
    addProviderInfo(contractName, type, classname, filename) {
        this.builderContext.addProviderInfo(contractName, type, classname, filename);
    }
    getProviderInfos() {
        return this.builderContext.providers;
    }
    getImports(registeredUtils, filepath) {
        return getImportStatements(convertUtilsToImportList(this, Object.keys(this.utils), registeredUtils), filepath);
    }
}
export class RenderContext extends RenderContextBase {
    mergeDefaultOpt(options) {
        return deepmerge(defaultOptions, options ?? {});
    }
}
