"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageComposerInterface = exports.createMessageComposerClass = void 0;
const t = __importStar(require("@babel/types"));
const case_1 = require("case");
const client_1 = require("../client/client");
const utils_1 = require("../utils");
const types_1 = require("../utils/types");
const createWasmExecMethodMessageComposer = (context, jsonschema) => {
    context.addUtil('Coin');
    context.addUtil('MsgExecuteContractEncodeObject');
    context.addUtil('MsgExecuteContract');
    context.addUtil('toUtf8');
    const underscoreName = Object.keys(jsonschema.properties)[0];
    const methodName = (0, case_1.camel)(underscoreName);
    const param = (0, types_1.createTypedObjectParams)(context, jsonschema.properties[underscoreName]);
    const args = (0, client_1.getWasmMethodArgs)(context, jsonschema.properties[underscoreName]);
    // what the underscore named property in the message is assigned to
    let actionValue;
    if (param?.type === 'Identifier') {
        actionValue = t.identifier(param.name);
    }
    else {
        actionValue = t.objectExpression(args);
    }
    const constantParams = [utils_1.OPTIONAL_FUNDS_PARAM];
    return t.classProperty(t.identifier(methodName), (0, utils_1.arrowFunctionExpression)(param
        ? [
            // props
            param,
            ...constantParams
        ]
        : constantParams, t.blockStatement([
        t.returnStatement(t.objectExpression([
            t.objectProperty(t.identifier('typeUrl'), t.stringLiteral('/cosmwasm.wasm.v1.MsgExecuteContract')),
            t.objectProperty(t.identifier('value'), t.callExpression(t.memberExpression(t.identifier('MsgExecuteContract'), t.identifier('fromPartial')), [
                t.objectExpression([
                    t.objectProperty(t.identifier('sender'), t.memberExpression(t.thisExpression(), t.identifier('sender'))),
                    t.objectProperty(t.identifier('contract'), t.memberExpression(t.thisExpression(), t.identifier('contractAddress'))),
                    t.objectProperty(t.identifier('msg'), t.callExpression(t.identifier('toUtf8'), [
                        t.callExpression(t.memberExpression(t.identifier('JSON'), t.identifier('stringify')), [
                            t.objectExpression([
                                t.objectProperty(t.identifier(underscoreName), actionValue)
                            ])
                        ])
                    ])),
                    t.objectProperty(t.identifier('funds'), t.identifier('funds_'))
                ])
            ]))
        ]))
    ]), 
    // return type
    t.tsTypeAnnotation(t.tsTypeReference(t.identifier('MsgExecuteContractEncodeObject'))), false));
};
const createMessageComposerClass = (context, className, implementsClassName, execMsg) => {
    const propertyNames = (0, utils_1.getMessageProperties)(execMsg)
        .map((method) => Object.keys(method.properties)?.[0])
        .filter(Boolean);
    const bindings = propertyNames.map(case_1.camel).map(utils_1.bindMethod);
    const methods = (0, utils_1.getMessageProperties)(execMsg).map((schema) => {
        return createWasmExecMethodMessageComposer(context, schema);
    });
    const blockStmt = [];
    blockStmt.push(...[
        t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier('sender')), t.identifier('sender'))),
        t.expressionStatement(t.assignmentExpression('=', t.memberExpression(t.thisExpression(), t.identifier('contractAddress')), t.identifier('contractAddress'))),
        ...bindings
    ]);
    return t.exportNamedDeclaration((0, utils_1.classDeclaration)(className, [
        // sender
        (0, utils_1.classProperty)('sender', t.tsTypeAnnotation(t.tsStringKeyword())),
        // contractAddress
        (0, utils_1.classProperty)('contractAddress', t.tsTypeAnnotation(t.tsStringKeyword())),
        // constructor
        t.classMethod('constructor', t.identifier('constructor'), [
            (0, utils_1.typedIdentifier)('sender', t.tsTypeAnnotation(t.tsStringKeyword())),
            (0, utils_1.typedIdentifier)('contractAddress', t.tsTypeAnnotation(t.tsStringKeyword()))
        ], t.blockStatement(blockStmt)),
        ...methods
    ], [t.tSExpressionWithTypeArguments(t.identifier(implementsClassName))], null));
};
exports.createMessageComposerClass = createMessageComposerClass;
const createMessageComposerInterface = (context, className, execMsg) => {
    const methods = (0, utils_1.getMessageProperties)(execMsg).map((jsonschema) => {
        const underscoreName = Object.keys(jsonschema.properties)[0];
        const methodName = (0, case_1.camel)(underscoreName);
        return createPropertyFunctionWithObjectParamsForMessageComposer(context, methodName, 'MsgExecuteContractEncodeObject', jsonschema.properties[underscoreName]);
    });
    const extendsAst = [];
    return t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(className), null, extendsAst, t.tSInterfaceBody([
        // contract address
        t.tSPropertySignature(t.identifier('contractAddress'), t.tsTypeAnnotation(t.tsStringKeyword())),
        // contract address
        t.tSPropertySignature(t.identifier('sender'), t.tsTypeAnnotation(t.tsStringKeyword())),
        ...methods
    ])));
};
exports.createMessageComposerInterface = createMessageComposerInterface;
const createPropertyFunctionWithObjectParamsForMessageComposer = (context, methodName, responseType, jsonschema) => {
    const obj = (0, types_1.createTypedObjectParams)(context, jsonschema);
    const fixedParams = [utils_1.OPTIONAL_FUNDS_PARAM];
    const func = {
        type: 'TSFunctionType',
        typeAnnotation: t.tsTypeAnnotation(t.tsTypeReference(t.identifier(responseType))),
        parameters: obj ? [obj, ...fixedParams] : fixedParams
    };
    return t.tSPropertySignature(t.identifier(methodName), t.tsTypeAnnotation(
    // @ts-ignore:next-line
    func));
};
