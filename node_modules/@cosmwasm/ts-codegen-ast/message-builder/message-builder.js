"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageBuilderClass = void 0;
const t = __importStar(require("@babel/types"));
const case_1 = require("case");
const client_1 = require("../client/client");
const utils_1 = require("../utils");
const types_1 = require("../utils/types");
const createMessageBuilderClass = (context, className, msg) => {
    const staticMethods = (0, utils_1.getMessageProperties)(msg).map((schema) => {
        return createStaticExecMethodMessageBuilder(context, schema, msg.title);
    });
    // const blockStmt = bindings;
    return t.exportNamedDeclaration((0, utils_1.abstractClassDeclaration)(className, staticMethods, [], null));
};
exports.createMessageBuilderClass = createMessageBuilderClass;
/**
 * CamelCasedProperties<Extract<ExecuteMsg, { exec_on_module: unknown }>['exec_on_module']>
 */
function createExtractTypeAnnotation(underscoreName, msgTitle) {
    return t.tsTypeAnnotation(t.tsTypeReference(t.identifier('CamelCasedProperties'), t.tsTypeParameterInstantiation([
        t.tsIndexedAccessType(t.tsTypeReference(t.identifier('Extract'), t.tsTypeParameterInstantiation([
            t.tsTypeReference(t.identifier(msgTitle)),
            t.tsTypeLiteral([
                t.tsPropertySignature(t.identifier(underscoreName), t.tsTypeAnnotation(t.tsUnknownKeyword()))
            ])
        ])), t.tsLiteralType(t.stringLiteral(underscoreName)))
    ])));
}
const createStaticExecMethodMessageBuilder = (context, jsonschema, msgTitle) => {
    const underscoreName = Object.keys(jsonschema.properties)[0];
    const methodName = (0, case_1.camel)(underscoreName);
    const param = (0, types_1.createTypedObjectParams)(context, jsonschema.properties[underscoreName]);
    const args = (0, client_1.getWasmMethodArgs)(context, jsonschema.properties[underscoreName]);
    // what the underscore named property in the message is assigned to
    let actionValue;
    if (param?.type === 'Identifier') {
        actionValue = t.identifier(param.name);
    }
    else {
        actionValue = t.tsAsExpression(t.objectExpression(args), t.tsTypeReference(t.identifier('const')));
    }
    // TODO: this is a hack to get the type annotation to work
    // all type annotations in the future should be the extracted and camelized type
    if (param &&
        param.typeAnnotation.type === 'TSTypeAnnotation' &&
        param.typeAnnotation.typeAnnotation.type === 'TSTypeLiteral') {
        param.typeAnnotation = createExtractTypeAnnotation(underscoreName, msgTitle);
    }
    return t.classProperty(t.identifier(methodName), (0, utils_1.arrowFunctionExpression)(
    // params
    param
        ? [
            // props
            param
        ]
        : [], 
    // body
    t.blockStatement([
        t.returnStatement(t.objectExpression([
            t.objectProperty(t.identifier(underscoreName), actionValue)
        ]))
    ]), 
    // return type
    t.tsTypeAnnotation(t.tsTypeReference(t.identifier(msgTitle))), false), null, null, false, 
    // static
    true);
};
