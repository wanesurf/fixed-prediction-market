import * as t from '@babel/types';
import { JSONSchema } from '@cosmwasm/ts-codegen-types';
import { ContractInfo, ProviderInfo, RenderOptions } from '../types';
import { UtilMapping } from './imports';
export interface IContext {
    refLookup($ref: string): JSONSchema;
    addUtil(util: string): void;
    getImports(registeredUtils?: UtilMapping, filepath?: string): (t.ImportNamespaceSpecifier | t.ImportDeclaration | t.ImportDefaultSpecifier)[];
}
export interface IRenderContext<TOpt = RenderOptions> extends IContext {
    contract: ContractInfo;
    options: TOpt;
    addProviderInfo(contractName: string, type: string, classname: string, filename: string): void;
    getProviderInfos(): {
        [key: string]: {
            [key: string]: ProviderInfo;
        };
    };
}
export declare const defaultOptions: RenderOptions;
export declare const getDefinitionSchema: (schemas: JSONSchema[]) => JSONSchema;
export declare class BuilderContext {
    providers: {
        [key: string]: {
            [key: string]: ProviderInfo;
        };
    };
    addProviderInfo(contractName: string, type: string, classname: string, filename: string): void;
    getProviderInfos(): {
        [key: string]: {
            [key: string]: ProviderInfo;
        };
    };
}
/**
 * context object for generating code.
 * only mergeDefaultOpt needs to implementing for combine options and default options.
 * @param TOpt option type
 */
export declare abstract class RenderContextBase<TOpt = RenderOptions> implements IRenderContext<TOpt> {
    builderContext: BuilderContext;
    contract: ContractInfo;
    utils: Record<string, boolean>;
    schema: JSONSchema;
    options: TOpt;
    constructor(contract: ContractInfo, options?: TOpt, builderContext?: BuilderContext);
    /**
     * merge options and default options
     * @param options
     */
    abstract mergeDefaultOpt(options: TOpt): TOpt;
    refLookup($ref: string): JSONSchema;
    addUtil(util: string): void;
    addProviderInfo(contractName: string, type: string, classname: string, filename: string): void;
    getProviderInfos(): {
        [key: string]: {
            [key: string]: ProviderInfo;
        };
    };
    getImports(registeredUtils?: UtilMapping, filepath?: string): (t.ImportNamespaceSpecifier | t.ImportDeclaration | t.ImportDefaultSpecifier)[];
}
export declare class RenderContext extends RenderContextBase {
    mergeDefaultOpt(options: RenderOptions): RenderOptions;
}
