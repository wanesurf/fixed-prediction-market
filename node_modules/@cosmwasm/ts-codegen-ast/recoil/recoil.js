"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRecoilQueryClient = exports.createRecoilQueryClientType = exports.createRecoilSelectors = exports.createRecoilSelector = void 0;
const t = __importStar(require("@babel/types"));
const case_1 = require("case");
const utils_1 = require("../utils");
const createRecoilSelector = (context, keyPrefix, QueryClient, methodName, responseType) => {
    context.addUtil('selectorFamily');
    const selectorName = (0, case_1.camel)(`${methodName}Selector`);
    const getterKey = (0, case_1.camel)(`${keyPrefix}${(0, case_1.pascal)(methodName)}`);
    return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier(selectorName), (0, utils_1.callExpression)(t.identifier('selectorFamily'), [
            t.objectExpression([
                t.objectProperty(t.identifier('key'), t.stringLiteral(getterKey)),
                t.objectProperty(t.identifier('get'), t.arrowFunctionExpression([
                    t.objectPattern([
                        t.objectProperty(t.identifier('params'), t.identifier('params'), false, true),
                        t.restElement(t.identifier('queryClientParams'))
                    ])
                ], t.arrowFunctionExpression([
                    t.objectPattern([
                        t.objectProperty(t.identifier('get'), t.identifier('get'), false, true)
                    ])
                ], t.blockStatement([
                    t.variableDeclaration('const', [
                        t.variableDeclarator(t.identifier('client'), t.callExpression(t.identifier('get'), [
                            t.callExpression(t.identifier('queryClient'), [
                                t.identifier('queryClientParams')
                            ])
                        ]))
                    ]),
                    t.returnStatement(t.awaitExpression(t.callExpression(t.memberExpression(t.identifier('client'), t.identifier(methodName)), [
                        t.spreadElement(t.identifier('params'))
                    ])))
                ]), true)))
            ])
        ], t.tsTypeParameterInstantiation([
            t.tsTypeReference(t.identifier(responseType)),
            t.tsIntersectionType([
                t.tsTypeReference(t.identifier('QueryClientParams')),
                t.tsTypeLiteral([
                    t.tsPropertySignature(t.identifier('params'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Parameters'), t.tsTypeParameterInstantiation([
                        t.tsIndexedAccessType(t.tsTypeReference(t.identifier(QueryClient)), t.tsLiteralType(t.stringLiteral(methodName)))
                    ]))))
                ])
            ])
        ])))]));
};
exports.createRecoilSelector = createRecoilSelector;
const createRecoilSelectors = (context, keyPrefix, QueryClient, queryMsg) => {
    return (0, utils_1.getMessageProperties)(queryMsg)
        .map((schema) => {
        const underscoreName = Object.keys(schema.properties)[0];
        const methodName = (0, case_1.camel)(underscoreName);
        const responseType = (0, utils_1.getResponseType)(context, underscoreName);
        return (0, exports.createRecoilSelector)(context, keyPrefix, QueryClient, methodName, responseType);
    });
};
exports.createRecoilSelectors = createRecoilSelectors;
const createRecoilQueryClientType = () => ({
    type: 'TSTypeAliasDeclaration',
    id: {
        type: 'Identifier',
        name: 'QueryClientParams'
    },
    typeAnnotation: {
        type: 'TSTypeLiteral',
        members: [
            {
                type: 'TSPropertySignature',
                key: {
                    type: 'Identifier',
                    name: 'contractAddress'
                },
                computed: false,
                typeAnnotation: {
                    type: 'TSTypeAnnotation',
                    typeAnnotation: {
                        type: 'TSStringKeyword'
                    }
                }
            }
        ]
    }
});
exports.createRecoilQueryClientType = createRecoilQueryClientType;
const createRecoilQueryClient = (context, keyPrefix, QueryClient) => {
    context.addUtil('selectorFamily');
    const getterKey = (0, case_1.camel)(`${keyPrefix}${'QueryClient'}`);
    return t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier('queryClient'), (0, utils_1.callExpression)(t.identifier('selectorFamily'), [
            t.objectExpression([
                t.objectProperty(t.identifier('key'), t.stringLiteral(getterKey)),
                t.objectProperty(t.identifier('get'), t.arrowFunctionExpression([
                    t.objectPattern([
                        t.objectProperty(t.identifier('contractAddress'), t.identifier('contractAddress'), false, true)
                    ])
                ], t.arrowFunctionExpression([
                    t.objectPattern([
                        t.objectProperty(t.identifier('get'), t.identifier('get'), false, true)
                    ])
                ], t.blockStatement([
                    t.variableDeclaration('const', [
                        t.variableDeclarator(t.identifier('client'), t.callExpression(t.identifier('get'), [
                            t.identifier('cosmWasmClient')
                        ]))
                    ]),
                    t.returnStatement(t.newExpression(t.identifier(QueryClient), [
                        t.identifier('client'),
                        t.identifier('contractAddress')
                    ]))
                ]), false)))
            ])
        ], t.tsTypeParameterInstantiation([
            t.tsTypeReference(t.identifier(QueryClient)),
            t.tsTypeReference(t.identifier('QueryClientParams'))
        ])))]));
};
exports.createRecoilQueryClient = createRecoilQueryClient;
