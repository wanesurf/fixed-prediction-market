import * as t from '@babel/types';
import { JSONSchema } from '@cosmwasm/ts-codegen-types';
import { RenderContext } from '../context';
export declare function getResponseType(context: RenderContext, underscoreName: string): string;
export declare const getTypeFromRef: ($ref: string) => t.TSTypeReference;
export declare const getTypeOrRef: (obj: JSONSchema) => t.TSType;
export declare const detectType: (type: string | string[]) => {
    type: string;
    optional: boolean;
};
export declare const getTypeInfo: (context: RenderContext, info: JSONSchema) => {
    type: t.TSBooleanKeyword | t.TSNullKeyword | t.TSNumberKeyword | t.TSStringKeyword | t.TSTypeReference | t.TSArrayType;
    optional: boolean;
};
export declare const getType: (type: string) => t.TSBooleanKeyword | t.TSNullKeyword | t.TSNumberKeyword | t.TSStringKeyword;
export declare const getPropertyType: (context: RenderContext, schema: JSONSchema, prop: string) => {
    type: t.TSBooleanKeyword | t.TSNullKeyword | t.TSNumberKeyword | t.TSStringKeyword | t.TSTypeReference | t.TSArrayType;
    optional: boolean;
};
export declare function getPropertySignatureFromProp(context: RenderContext, jsonschema: JSONSchema, prop: string, camelize: boolean): t.TSPropertySignature;
export declare const getParamsTypeAnnotation: (context: RenderContext, jsonschema: any, camelize?: boolean) => t.TSTypeAnnotation;
export declare const createTypedObjectParams: (context: RenderContext, jsonschema: JSONSchema, camelize?: boolean) => (t.Identifier | t.Pattern | t.RestElement);
