import { sync as mkdirp } from 'mkdirp';
import { basename, dirname, extname, join } from 'path';
import { contractContextBase, contractContextBaseShortHandCtor, contractsContextTSX, } from '../helpers';
import { writeContentToFile } from '../utils/files';
import { header } from '../utils/header';
const write = (outPath, file, content, varname) => {
    const outFile = join(outPath, file);
    mkdirp(dirname(outFile));
    writeContentToFile(outPath, header + content, outFile);
    return {
        type: 'plugin',
        pluginType: 'helper',
        contract: varname ?? basename(file, extname(file)),
        localname: file,
        filename: outFile,
    };
};
export const createHelpers = (input, builderContext) => {
    const files = [];
    if (input.options?.useContractsHook?.enabled &&
        Object.keys(builderContext.providers)?.length) {
        const useShorthandCtor = input.options?.useShorthandCtor;
        files.push(write(input.outPath, 'contractContextBase.ts', useShorthandCtor
            ? contractContextBaseShortHandCtor
            : contractContextBase));
        files.push(write(input.outPath, 'contracts-context.tsx', contractsContextTSX, 'contractsContext'));
    }
    return files;
};
