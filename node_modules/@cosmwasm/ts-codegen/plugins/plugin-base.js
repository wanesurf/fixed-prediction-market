"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuilderPluginBase = void 0;
const generator_1 = __importDefault(require("@babel/generator"));
const t = __importStar(require("@babel/types"));
const ts_codegen_ast_1 = require("@cosmwasm/ts-codegen-ast");
const deepmerge_1 = __importDefault(require("deepmerge"));
const fs_1 = require("fs");
const mkdirp_1 = require("mkdirp");
const path_1 = require("path");
const header_1 = require("../utils/header");
/**
 * BuilderPluginBase enable ts-codegen users implement their own plugins by only implement a few functions.
 */
class BuilderPluginBase {
    builder;
    options;
    utils;
    /**
     * prop to indicate to execute the render function in the lifecycle of main process or after
     */
    lifecycle;
    defaultContractName;
    constructor(opts, builder) {
        this.options = opts;
        this.builder = builder;
        this.lifecycle = 'main';
    }
    setBuilder(builder) {
        this.builder = builder;
    }
    async render(outPath, name, contractInfo) {
        if (!this.options) {
            this.options = this.getDefaultOptions(this.options);
        }
        const { enabled } = this.options;
        if (!enabled) {
            return;
        }
        const context = this.initContext(contractInfo, this.options);
        const results = await this.doRender(name, context);
        if (!results || !results.length) {
            return [];
        }
        return results.map((result) => {
            const imports = context.getImports(this.utils, result.localname);
            // @ts-ignore
            const code = header_1.header + (0, generator_1.default)(t.program([...imports, ...result.body])).code;
            (0, mkdirp_1.sync)(outPath);
            const filename = (0, path_1.join)(outPath, result.localname);
            (0, fs_1.writeFileSync)(filename, code);
            return {
                type: result.type,
                pluginType: result.pluginType,
                contract: name,
                localname: result.localname,
                filename,
            };
        });
    }
    /**
     * get default options
     */
    getDefaultOptions(opts) {
        return (0, deepmerge_1.default)(ts_codegen_ast_1.defaultOptions, opts ?? {});
    }
}
exports.BuilderPluginBase = BuilderPluginBase;
