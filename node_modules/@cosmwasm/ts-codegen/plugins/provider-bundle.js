"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractsProviderBundlePlugin = void 0;
const w = __importStar(require("@cosmwasm/ts-codegen-ast"));
const ts_codegen_ast_1 = require("@cosmwasm/ts-codegen-ast");
const case_1 = require("case");
const plugin_base_1 = require("./plugin-base");
const provider_1 = require("./provider");
class ContractsProviderBundlePlugin extends plugin_base_1.BuilderPluginBase {
    constructor(opt) {
        super(opt);
        this.lifecycle = 'after';
        this.defaultContractName = 'contractContextProviders';
        this.utils = {
            CosmWasmClient: '@cosmjs/cosmwasm-stargate',
            SigningCosmWasmClient: '@cosmjs/cosmwasm-stargate',
            IQueryClientProvider: '__contractContextBase__',
            ISigningClientProvider: '__contractContextBase__',
            IMessageComposerProvider: '__contractContextBase__',
        };
    }
    initContext(contract, options) {
        return new ts_codegen_ast_1.RenderContext(contract, options, this.builder?.builderContext);
    }
    async doRender(name, context) {
        if (!this.options?.useContractsHook?.enabled) {
            return;
        }
        const providerInfos = context.getProviderInfos();
        if (!Object.keys(providerInfos || {})?.length) {
            return;
        }
        const localname = 'contractContextProviders.ts';
        const body = [];
        context.addUtil('CosmWasmClient');
        context.addUtil('SigningCosmWasmClient');
        context.addUtil('IQueryClientProvider');
        context.addUtil('ISigningClientProvider');
        context.addUtil('IMessageComposerProvider');
        for (const name in providerInfos) {
            if (Object.prototype.hasOwnProperty.call(providerInfos, name)) {
                const providerInfo = providerInfos[name];
                for (const key in providerInfo) {
                    if (Object.prototype.hasOwnProperty.call(providerInfo, key)) {
                        const info = providerInfo[key];
                        body.push(w.importStmt([info.classname], `./${info.basename}`));
                    }
                }
                body.push(w.importStmt([(0, case_1.pascal)(name)], `./${(0, provider_1.GetLocalBaseNameByContractName)(name)}`));
            }
        }
        body.push(w.createIContractsContext(providerInfos));
        body.push(w.createGettingProviders(providerInfos));
        return [
            {
                type: 'plugin',
                pluginType: 'contractContextProviders',
                localname,
                body,
            },
        ];
    }
}
exports.ContractsProviderBundlePlugin = ContractsProviderBundlePlugin;
