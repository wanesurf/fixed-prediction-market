"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientPlugin = void 0;
const w = __importStar(require("@cosmwasm/ts-codegen-ast"));
const ts_codegen_ast_1 = require("@cosmwasm/ts-codegen-ast");
const case_1 = require("case");
const utils_1 = require("../utils");
const plugin_base_1 = require("./plugin-base");
class ClientPlugin extends plugin_base_1.BuilderPluginBase {
    initContext(contract, options) {
        return new ts_codegen_ast_1.RenderContext(contract, options, this.builder?.builderContext);
    }
    async doRender(name, context) {
        const { enabled } = this.options.client;
        if (!enabled) {
            return;
        }
        const { schemas } = context.contract;
        const localname = (0, case_1.pascal)(name) + '.client.ts';
        const TypesFile = (0, case_1.pascal)(name) + '.types';
        const QueryMsg = (0, utils_1.findQueryMsg)(schemas);
        const ExecuteMsg = (0, utils_1.findExecuteMsg)(schemas);
        const typeHash = await (0, utils_1.findAndParseTypes)(schemas);
        let Client = null;
        let Instance = null;
        let QueryClient = null;
        let ReadOnlyInstance = null;
        const body = [];
        body.push(w.importStmt(Object.keys(typeHash), `./${TypesFile}`));
        // query messages
        if (QueryMsg) {
            QueryClient = (0, case_1.pascal)(`${name}QueryClient`);
            ReadOnlyInstance = (0, case_1.pascal)(`${name}ReadOnlyInterface`);
            body.push(w.createQueryInterface(context, ReadOnlyInstance, QueryMsg));
            body.push(w.createQueryClass(context, QueryClient, ReadOnlyInstance, QueryMsg));
            context.addProviderInfo(name, w.PROVIDER_TYPES.QUERY_CLIENT_TYPE, QueryClient, localname);
        }
        // execute messages
        if (ExecuteMsg) {
            const children = (0, ts_codegen_ast_1.getMessageProperties)(ExecuteMsg);
            if (children.length > 0) {
                Client = (0, case_1.pascal)(`${name}Client`);
                Instance = (0, case_1.pascal)(`${name}Interface`);
                body.push(w.createExecuteInterface(context, Instance, this.options.client.execExtendsQuery ? ReadOnlyInstance : null, ExecuteMsg));
                body.push(w.createExecuteClass(context, Client, Instance, this.options.client.execExtendsQuery ? QueryClient : null, ExecuteMsg));
                context.addProviderInfo(name, w.PROVIDER_TYPES.SIGNING_CLIENT_TYPE, Client, localname);
            }
        }
        if (typeHash.hasOwnProperty('Coin')) {
            // @ts-ignore
            delete context.utils.Coin;
        }
        return [
            {
                type: 'client',
                localname,
                body,
            },
        ];
    }
}
exports.ClientPlugin = ClientPlugin;
