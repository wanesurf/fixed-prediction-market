"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractsContextProviderPlugin = exports.GetLocalBaseNameByContractName = exports.GetLocalNameByContractName = void 0;
const w = __importStar(require("@cosmwasm/ts-codegen-ast"));
const ts_codegen_ast_1 = require("@cosmwasm/ts-codegen-ast");
const case_1 = require("case");
const plugin_base_1 = require("./plugin-base");
const GetLocalNameByContractName = (name) => `${(0, case_1.pascal)(name)}.provider.ts`;
exports.GetLocalNameByContractName = GetLocalNameByContractName;
const GetLocalBaseNameByContractName = (name) => `${(0, case_1.pascal)(name)}.provider`;
exports.GetLocalBaseNameByContractName = GetLocalBaseNameByContractName;
class ContractsContextProviderPlugin extends plugin_base_1.BuilderPluginBase {
    constructor(opt) {
        super(opt);
        this.utils = {
            ContractBase: '__contractContextBase__',
            IContractConstructor: '__contractContextBase__',
            IEmptyClient: '__contractContextBase__',
        };
    }
    initContext(contract, options) {
        return new ts_codegen_ast_1.RenderContext(contract, options, this.builder?.builderContext);
    }
    async doRender(name, context) {
        if (!this.options?.useContractsHook?.enabled) {
            return;
        }
        const providerInfo = context.getProviderInfos()[name];
        if (!Object.keys(providerInfo || {})?.length) {
            return;
        }
        context.addUtil('ContractBase');
        context.addUtil('IContractConstructor');
        const localname = (0, exports.GetLocalNameByContractName)(name);
        let needEmptyClientType = false;
        let clientFile = null;
        let clientClasses = [];
        const body = [];
        const signClientProviderInfo = providerInfo[w.PROVIDER_TYPES.SIGNING_CLIENT_TYPE];
        if (signClientProviderInfo) {
            clientFile = `./${signClientProviderInfo.basename}`;
            clientClasses.push(signClientProviderInfo.classname);
        }
        else {
            needEmptyClientType = true;
        }
        const queryClientProviderInfo = providerInfo[w.PROVIDER_TYPES.QUERY_CLIENT_TYPE];
        if (queryClientProviderInfo) {
            clientFile = `./${queryClientProviderInfo.basename}`;
            clientClasses.push(queryClientProviderInfo.classname);
        }
        else {
            needEmptyClientType = true;
        }
        if (clientFile) {
            body.push(w.importStmt(clientClasses, clientFile));
        }
        const messageComposerProviderInfo = providerInfo[w.PROVIDER_TYPES.MESSAGE_COMPOSER_TYPE];
        if (messageComposerProviderInfo) {
            body.push(w.importStmt([messageComposerProviderInfo.classname], `./${messageComposerProviderInfo.basename}`));
        }
        else {
            needEmptyClientType = true;
        }
        if (needEmptyClientType) {
            context.addUtil('IEmptyClient');
        }
        body.push(w.createProvider(name, providerInfo));
        return [
            {
                type: 'plugin',
                pluginType: 'provider',
                localname,
                body,
            },
        ];
    }
}
exports.ContractsContextProviderPlugin = ContractsContextProviderPlugin;
