{
  "contract_name": "truth-markets-contract-fixed",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "buy_denom"
    ],
    "properties": {
      "buy_denom": {
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_market"
        ],
        "properties": {
          "create_market": {
            "type": "object",
            "required": [
              "banner_url",
              "buy_token",
              "description",
              "end_time",
              "end_time_string",
              "id",
              "options",
              "resolution_source",
              "start_time_string",
              "title"
            ],
            "properties": {
              "banner_url": {
                "type": "string"
              },
              "buy_token": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "end_time": {
                "type": "string"
              },
              "end_time_string": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resolution_source": {
                "type": "string"
              },
              "start_time_string": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "buy_share"
        ],
        "properties": {
          "buy_share": {
            "type": "object",
            "required": [
              "amount",
              "market_id",
              "option"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Coin"
              },
              "market_id": {
                "type": "string"
              },
              "option": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "resolve"
        ],
        "properties": {
          "resolve": {
            "type": "object",
            "required": [
              "market_id",
              "winning_option"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              },
              "winning_option": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "market_id"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "type": "string"
          },
          "denom": {
            "type": "string"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_market"
        ],
        "properties": {
          "get_market": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_shares"
        ],
        "properties": {
          "get_shares": {
            "type": "object",
            "required": [
              "market_id",
              "user"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              },
              "user": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_market_stats"
        ],
        "properties": {
          "get_market_stats": {
            "type": "object",
            "required": [
              "market_id"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_user_potential_winnings"
        ],
        "properties": {
          "get_user_potential_winnings": {
            "type": "object",
            "required": [
              "market_id",
              "user"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              },
              "user": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_user_winnings"
        ],
        "properties": {
          "get_user_winnings": {
            "type": "object",
            "required": [
              "market_id",
              "user"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              },
              "user": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_user_balance"
        ],
        "properties": {
          "get_user_balance": {
            "type": "object",
            "required": [
              "denom",
              "user"
            ],
            "properties": {
              "denom": {
                "type": "string"
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_all_shares"
        ],
        "properties": {
          "get_all_shares": {
            "type": "object",
            "required": [
              "market_id"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_total_value"
        ],
        "properties": {
          "get_total_value": {
            "type": "object",
            "required": [
              "market_id"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_total_shares_per_option"
        ],
        "properties": {
          "get_total_shares_per_option": {
            "type": "object",
            "required": [
              "market_id"
            ],
            "properties": {
              "market_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_all_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllSharesResponse",
      "type": "object",
      "required": [
        "shares"
      ],
      "properties": {
        "shares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "ShareResponse": {
          "type": "object",
          "required": [
            "amount",
            "has_withdrawn",
            "option",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "has_withdrawn": {
              "type": "boolean"
            },
            "option": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_market": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MarketResponse",
      "type": "object",
      "required": [
        "banner_url",
        "buy_token",
        "description",
        "end_time",
        "end_time_string",
        "id",
        "num_bettors",
        "options",
        "outcome",
        "resolution_source",
        "resolved",
        "start_time_string",
        "title",
        "token_a",
        "token_b",
        "total_value"
      ],
      "properties": {
        "banner_url": {
          "type": "string"
        },
        "buy_token": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "end_time_string": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "num_bettors": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outcome": {
          "$ref": "#/definitions/MarketOutcome"
        },
        "resolution_source": {
          "type": "string"
        },
        "resolved": {
          "type": "boolean"
        },
        "start_time_string": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "token_a": {
          "$ref": "#/definitions/Coin"
        },
        "token_b": {
          "$ref": "#/definitions/Coin"
        },
        "total_value": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "MarketOption": {
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "type": "string"
            }
          }
        },
        "MarketOutcome": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "Unresolved"
              ]
            },
            {
              "type": "object",
              "required": [
                "Resolved"
              ],
              "properties": {
                "Resolved": {
                  "$ref": "#/definitions/MarketOption"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "get_market_stats": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MarketStatsResponse",
      "type": "object",
      "required": [
        "num_bettors",
        "odds_a",
        "odds_b",
        "total_value"
      ],
      "properties": {
        "num_bettors": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "odds_a": {
          "$ref": "#/definitions/Decimal"
        },
        "odds_b": {
          "$ref": "#/definitions/Decimal"
        },
        "total_value": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "get_shares": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllSharesResponse",
      "type": "object",
      "required": [
        "shares"
      ],
      "properties": {
        "shares": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "ShareResponse": {
          "type": "object",
          "required": [
            "amount",
            "has_withdrawn",
            "option",
            "user"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Coin"
            },
            "has_withdrawn": {
              "type": "boolean"
            },
            "option": {
              "type": "string"
            },
            "user": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_total_shares_per_option": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalSharesPerOptionResponse",
      "type": "object",
      "required": [
        "pair_a",
        "pair_b"
      ],
      "properties": {
        "pair_a": {
          "$ref": "#/definitions/MarketPair"
        },
        "pair_b": {
          "$ref": "#/definitions/MarketPair"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "MarketOption": {
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "type": "string"
            }
          }
        },
        "MarketPair": {
          "type": "object",
          "required": [
            "option",
            "token"
          ],
          "properties": {
            "option": {
              "$ref": "#/definitions/MarketOption"
            },
            "token": {
              "$ref": "#/definitions/Coin"
            }
          }
        }
      }
    },
    "get_total_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalValueResponse",
      "type": "object",
      "required": [
        "total_value"
      ],
      "properties": {
        "total_value": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        }
      }
    },
    "get_user_balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryBalanceResponse",
      "type": "object",
      "required": [
        "balance",
        "frozen",
        "locked",
        "whitelisted"
      ],
      "properties": {
        "balance": {
          "description": "balance contains the balance with the queried account and denom",
          "type": "string"
        },
        "frozen": {
          "description": "frozen is the frozen amount of the denom on the account.",
          "type": "string"
        },
        "locked": {
          "description": "locked is the balance locked by vesting.",
          "type": "string"
        },
        "whitelisted": {
          "description": "whitelisted is the whitelisted amount of the denom on the account.",
          "type": "string"
        }
      }
    },
    "get_user_potential_winnings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserPotentialWinningsResponse",
      "type": "object",
      "required": [
        "potential_win_a",
        "potential_win_b"
      ],
      "properties": {
        "potential_win_a": {
          "$ref": "#/definitions/Coin"
        },
        "potential_win_b": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        }
      }
    },
    "get_user_winnings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserWinningsResponse",
      "type": "object",
      "required": [
        "winnings"
      ],
      "properties": {
        "winnings": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "description": "Coin defines a token with a denomination and an amount.\n\nNOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.",
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
