/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Coin, QueryMsg, Addr, AllSharesResponse, ShareResponse, MarketOutcome, MarketResponse, MarketStatsResponse, QueryBalanceResponse, UserPotentialWinningsResponse, UserWinningsResponse } from "./TruthMarketsContractFixed.types";
export interface TruthMarketsContractFixedReadOnlyInterface {
  contractAddress: string;
  getMarket: ({
    id
  }: {
    id: string;
  }) => Promise<MarketResponse>;
  getShares: ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }) => Promise<ShareResponse>;
  getMarketStats: ({
    marketId
  }: {
    marketId: string;
  }) => Promise<MarketStatsResponse>;
  getUserPotentialWinnings: ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }) => Promise<UserPotentialWinningsResponse>;
  getUserWinnings: ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }) => Promise<UserWinningsResponse>;
  getUserBalance: ({
    denom,
    user
  }: {
    denom: string;
    user: string;
  }) => Promise<QueryBalanceResponse>;
  getAllShares: ({
    marketId
  }: {
    marketId: string;
  }) => Promise<AllSharesResponse>;
}
export class TruthMarketsContractFixedQueryClient implements TruthMarketsContractFixedReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getMarket = this.getMarket.bind(this);
    this.getShares = this.getShares.bind(this);
    this.getMarketStats = this.getMarketStats.bind(this);
    this.getUserPotentialWinnings = this.getUserPotentialWinnings.bind(this);
    this.getUserWinnings = this.getUserWinnings.bind(this);
    this.getUserBalance = this.getUserBalance.bind(this);
    this.getAllShares = this.getAllShares.bind(this);
  }
  getMarket = async ({
    id
  }: {
    id: string;
  }): Promise<MarketResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_market: {
        id
      }
    });
  };
  getShares = async ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }): Promise<ShareResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_shares: {
        market_id: marketId,
        user
      }
    });
  };
  getMarketStats = async ({
    marketId
  }: {
    marketId: string;
  }): Promise<MarketStatsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_market_stats: {
        market_id: marketId
      }
    });
  };
  getUserPotentialWinnings = async ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }): Promise<UserPotentialWinningsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_potential_winnings: {
        market_id: marketId,
        user
      }
    });
  };
  getUserWinnings = async ({
    marketId,
    user
  }: {
    marketId: string;
    user: Addr;
  }): Promise<UserWinningsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_winnings: {
        market_id: marketId,
        user
      }
    });
  };
  getUserBalance = async ({
    denom,
    user
  }: {
    denom: string;
    user: string;
  }): Promise<QueryBalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_balance: {
        denom,
        user
      }
    });
  };
  getAllShares = async ({
    marketId
  }: {
    marketId: string;
  }): Promise<AllSharesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_shares: {
        market_id: marketId
      }
    });
  };
}
export interface TruthMarketsContractFixedInterface extends TruthMarketsContractFixedReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createMarket: ({
    bannerUrl,
    buyToken,
    description,
    endTime,
    endTimeString,
    id,
    options,
    resolutionSource,
    startTimeString,
    title
  }: {
    bannerUrl: string;
    buyToken: string;
    description: string;
    endTime: string;
    endTimeString: string;
    id: string;
    options: string[];
    resolutionSource: string;
    startTimeString: string;
    title: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  buyShare: ({
    amount,
    marketId,
    option
  }: {
    amount: Coin;
    marketId: string;
    option: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  resolve: ({
    marketId,
    winningOption
  }: {
    marketId: string;
    winningOption: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    marketId
  }: {
    marketId: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class TruthMarketsContractFixedClient extends TruthMarketsContractFixedQueryClient implements TruthMarketsContractFixedInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createMarket = this.createMarket.bind(this);
    this.buyShare = this.buyShare.bind(this);
    this.resolve = this.resolve.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }
  createMarket = async ({
    bannerUrl,
    buyToken,
    description,
    endTime,
    endTimeString,
    id,
    options,
    resolutionSource,
    startTimeString,
    title
  }: {
    bannerUrl: string;
    buyToken: string;
    description: string;
    endTime: string;
    endTimeString: string;
    id: string;
    options: string[];
    resolutionSource: string;
    startTimeString: string;
    title: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_market: {
        banner_url: bannerUrl,
        buy_token: buyToken,
        description,
        end_time: endTime,
        end_time_string: endTimeString,
        id,
        options,
        resolution_source: resolutionSource,
        start_time_string: startTimeString,
        title
      }
    }, fee_, memo_, funds_);
  };
  buyShare = async ({
    amount,
    marketId,
    option
  }: {
    amount: Coin;
    marketId: string;
    option: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_share: {
        amount,
        market_id: marketId,
        option
      }
    }, fee_, memo_, funds_);
  };
  resolve = async ({
    marketId,
    winningOption
  }: {
    marketId: string;
    winningOption: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      resolve: {
        market_id: marketId,
        winning_option: winningOption
      }
    }, fee_, memo_, funds_);
  };
  withdraw = async ({
    marketId
  }: {
    marketId: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        market_id: marketId
      }
    }, fee_, memo_, funds_);
  };
}