/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Coin, QueryMsg, Addr, AllSharesResponse, ShareResponse, MarketOutcome, MarketResponse, MarketStatsResponse, QueryBalanceResponse, UserPotentialWinningsResponse, UserWinningsResponse } from "./TruthMarketsContractFixed.types";
import { TruthMarketsContractFixedQueryClient, TruthMarketsContractFixedClient } from "./TruthMarketsContractFixed.client";
export const truthMarketsContractFixedQueryKeys = {
  contract: ([{
    contract: "truthMarketsContractFixed"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...truthMarketsContractFixedQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getMarket: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_market",
    args
  }] as const),
  getShares: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_shares",
    args
  }] as const),
  getMarketStats: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_market_stats",
    args
  }] as const),
  getUserPotentialWinnings: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_user_potential_winnings",
    args
  }] as const),
  getUserWinnings: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_user_winnings",
    args
  }] as const),
  getUserBalance: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_user_balance",
    args
  }] as const),
  getAllShares: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...truthMarketsContractFixedQueryKeys.address(contractAddress)[0],
    method: "get_all_shares",
    args
  }] as const)
};
export const truthMarketsContractFixedQueries = {
  getMarket: <TData = MarketResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetMarketQuery<TData>): UseQueryOptions<MarketResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getMarket(client?.contractAddress, args),
    queryFn: () => client ? client.getMarket({
      id: args.id
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getShares: <TData = ShareResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetSharesQuery<TData>): UseQueryOptions<ShareResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getShares(client?.contractAddress, args),
    queryFn: () => client ? client.getShares({
      marketId: args.marketId,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getMarketStats: <TData = MarketStatsResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetMarketStatsQuery<TData>): UseQueryOptions<MarketStatsResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getMarketStats(client?.contractAddress, args),
    queryFn: () => client ? client.getMarketStats({
      marketId: args.marketId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUserPotentialWinnings: <TData = UserPotentialWinningsResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetUserPotentialWinningsQuery<TData>): UseQueryOptions<UserPotentialWinningsResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getUserPotentialWinnings(client?.contractAddress, args),
    queryFn: () => client ? client.getUserPotentialWinnings({
      marketId: args.marketId,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUserWinnings: <TData = UserWinningsResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetUserWinningsQuery<TData>): UseQueryOptions<UserWinningsResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getUserWinnings(client?.contractAddress, args),
    queryFn: () => client ? client.getUserWinnings({
      marketId: args.marketId,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getUserBalance: <TData = QueryBalanceResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetUserBalanceQuery<TData>): UseQueryOptions<QueryBalanceResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getUserBalance(client?.contractAddress, args),
    queryFn: () => client ? client.getUserBalance({
      denom: args.denom,
      user: args.user
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getAllShares: <TData = AllSharesResponse,>({
    client,
    args,
    options
  }: TruthMarketsContractFixedGetAllSharesQuery<TData>): UseQueryOptions<AllSharesResponse, Error, TData> => ({
    queryKey: truthMarketsContractFixedQueryKeys.getAllShares(client?.contractAddress, args),
    queryFn: () => client ? client.getAllShares({
      marketId: args.marketId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface TruthMarketsContractFixedReactQuery<TResponse, TData = TResponse> {
  client: TruthMarketsContractFixedQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface TruthMarketsContractFixedGetAllSharesQuery<TData> extends TruthMarketsContractFixedReactQuery<AllSharesResponse, TData> {
  args: {
    marketId: string;
  };
}
export function useTruthMarketsContractFixedGetAllSharesQuery<TData = AllSharesResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetAllSharesQuery<TData>) {
  return useQuery<AllSharesResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getAllShares(client?.contractAddress, args), () => client ? client.getAllShares({
    marketId: args.marketId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetUserBalanceQuery<TData> extends TruthMarketsContractFixedReactQuery<QueryBalanceResponse, TData> {
  args: {
    denom: string;
    user: string;
  };
}
export function useTruthMarketsContractFixedGetUserBalanceQuery<TData = QueryBalanceResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetUserBalanceQuery<TData>) {
  return useQuery<QueryBalanceResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getUserBalance(client?.contractAddress, args), () => client ? client.getUserBalance({
    denom: args.denom,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetUserWinningsQuery<TData> extends TruthMarketsContractFixedReactQuery<UserWinningsResponse, TData> {
  args: {
    marketId: string;
    user: Addr;
  };
}
export function useTruthMarketsContractFixedGetUserWinningsQuery<TData = UserWinningsResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetUserWinningsQuery<TData>) {
  return useQuery<UserWinningsResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getUserWinnings(client?.contractAddress, args), () => client ? client.getUserWinnings({
    marketId: args.marketId,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetUserPotentialWinningsQuery<TData> extends TruthMarketsContractFixedReactQuery<UserPotentialWinningsResponse, TData> {
  args: {
    marketId: string;
    user: Addr;
  };
}
export function useTruthMarketsContractFixedGetUserPotentialWinningsQuery<TData = UserPotentialWinningsResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetUserPotentialWinningsQuery<TData>) {
  return useQuery<UserPotentialWinningsResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getUserPotentialWinnings(client?.contractAddress, args), () => client ? client.getUserPotentialWinnings({
    marketId: args.marketId,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetMarketStatsQuery<TData> extends TruthMarketsContractFixedReactQuery<MarketStatsResponse, TData> {
  args: {
    marketId: string;
  };
}
export function useTruthMarketsContractFixedGetMarketStatsQuery<TData = MarketStatsResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetMarketStatsQuery<TData>) {
  return useQuery<MarketStatsResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getMarketStats(client?.contractAddress, args), () => client ? client.getMarketStats({
    marketId: args.marketId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetSharesQuery<TData> extends TruthMarketsContractFixedReactQuery<ShareResponse, TData> {
  args: {
    marketId: string;
    user: Addr;
  };
}
export function useTruthMarketsContractFixedGetSharesQuery<TData = ShareResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetSharesQuery<TData>) {
  return useQuery<ShareResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getShares(client?.contractAddress, args), () => client ? client.getShares({
    marketId: args.marketId,
    user: args.user
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedGetMarketQuery<TData> extends TruthMarketsContractFixedReactQuery<MarketResponse, TData> {
  args: {
    id: string;
  };
}
export function useTruthMarketsContractFixedGetMarketQuery<TData = MarketResponse>({
  client,
  args,
  options
}: TruthMarketsContractFixedGetMarketQuery<TData>) {
  return useQuery<MarketResponse, Error, TData>(truthMarketsContractFixedQueryKeys.getMarket(client?.contractAddress, args), () => client ? client.getMarket({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TruthMarketsContractFixedWithdrawMutation {
  client: TruthMarketsContractFixedClient;
  msg: {
    marketId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTruthMarketsContractFixedWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TruthMarketsContractFixedWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TruthMarketsContractFixedWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface TruthMarketsContractFixedResolveMutation {
  client: TruthMarketsContractFixedClient;
  msg: {
    marketId: string;
    winningOption: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTruthMarketsContractFixedResolveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TruthMarketsContractFixedResolveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TruthMarketsContractFixedResolveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.resolve(msg, fee, memo, funds), options);
}
export interface TruthMarketsContractFixedBuyShareMutation {
  client: TruthMarketsContractFixedClient;
  msg: {
    amount: Coin;
    marketId: string;
    option: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTruthMarketsContractFixedBuyShareMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TruthMarketsContractFixedBuyShareMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TruthMarketsContractFixedBuyShareMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.buyShare(msg, fee, memo, funds), options);
}
export interface TruthMarketsContractFixedCreateMarketMutation {
  client: TruthMarketsContractFixedClient;
  msg: {
    bannerUrl: string;
    buyToken: string;
    description: string;
    endTime: string;
    endTimeString: string;
    id: string;
    options: string[];
    resolutionSource: string;
    startTimeString: string;
    title: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTruthMarketsContractFixedCreateMarketMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TruthMarketsContractFixedCreateMarketMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TruthMarketsContractFixedCreateMarketMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createMarket(msg, fee, memo, funds), options);
}