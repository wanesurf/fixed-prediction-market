/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  buy_denom: string;
}
export type ExecuteMsg = {
  create_market: {
    banner_url: string;
    buy_token: string;
    description: string;
    end_time: string;
    end_time_string: string;
    id: string;
    options: string[];
    resolution_source: string;
    start_time_string: string;
    title: string;
  };
} | {
  buy_share: {
    amount: Coin;
    market_id: string;
    option: string;
  };
} | {
  resolve: {
    market_id: string;
    winning_option: string;
  };
} | {
  withdraw: {
    market_id: string;
  };
};
export interface Coin {
  amount: string;
  denom: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_market: {
    id: string;
  };
} | {
  get_shares: {
    market_id: string;
    user: Addr;
  };
} | {
  get_market_stats: {
    market_id: string;
  };
} | {
  get_user_potential_winnings: {
    market_id: string;
    user: Addr;
  };
} | {
  get_user_winnings: {
    market_id: string;
    user: Addr;
  };
} | {
  get_user_balance: {
    denom: string;
    user: string;
  };
} | {
  get_all_shares: {
    market_id: string;
  };
};
export type Addr = string;
export interface AllSharesResponse {
  shares: ShareResponse[];
}
export interface ShareResponse {
  amount: Coin;
  has_withdrawn: boolean;
  option: string;
  user: Addr;
}
export type MarketOutcome = "Unresolved" | "OptionA" | "OptionB";
export interface MarketResponse {
  banner_url: string;
  buy_token: string;
  description: string;
  end_time: string;
  end_time_string: string;
  id: string;
  num_bettors: number;
  options: string[];
  outcome: MarketOutcome;
  resolution_source: string;
  resolved: boolean;
  start_time_string: string;
  title: string;
  token_a: string;
  token_b: string;
  total_value: Coin;
}
export interface MarketStatsResponse {
  num_bettors: number;
  odds_a: number;
  odds_b: number;
  total_value: Coin;
}
export interface QueryBalanceResponse {
  balance: string;
  frozen: string;
  locked: string;
  whitelisted: string;
  [k: string]: unknown;
}
export interface UserPotentialWinningsResponse {
  potential_win_a: Coin;
  potential_win_b: Coin;
}
export interface UserWinningsResponse {
  winnings: Coin;
}